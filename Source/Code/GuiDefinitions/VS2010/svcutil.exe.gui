<?xml version="1.0" encoding="utf-8"?>
<executables xmlns="http://schemas.cannedbytes.com/CommandLineGui/Schema/v1" fileVersion="1.0.0">
  <executable name="SvcUtil.exe4" location="C:\Program Files\Microsoft SDKs\Windows\v7.0A\bin\SvcUtil.exe" helpCmd="/?" helpUrl="http://msdn.microsoft.com/en-us/library/aa347733.aspx">
    <arguments>
      <!-- general arguments -->
      <argument name="NoLogo" format="/noLogo" multiplicity="ZeroOrOne" description="Suppress the copyright and banner message."/>
      <argument name="Directory" format="/d:&quot;{0}&quot;" multiplicity="ZeroOrOne" description="Directory to create files in."/>
      <argument name="Target" format="/t:{0}" multiplicity="ExactlyOne" ordinal="0" description="Specifies the output to be generated by the tool."/>
      <!-- code generation arguments -->
      <argument name="EndpointRef" format="&quot;{0}&quot;" multiplicity="ZeroOrOne" ordinal="1" description="The path to an XML file that contains a WS-Addressing EndpointReference for a service endpoint that supports WS-Metadata Exchange. For more information, see the Metadata Download section."/>
      <argument name="MetadataDoc" format="&quot;{0}&quot;" multiplicity="ZeroOrMore" ordinal="1" description="The path to a metadata document (wsdl or xsd) that contains the contract to import into code (.wsdl, .xsd, .wspolicy or .wsmex). Svcutil follows imports and includes when you specify a remote URL for metadata.&#xa;However, if you want to process metadata files on the local file system, you must specify all files in this argument.&#xa;In this way, you can use Svcutil in a build environment where you cannot have network dependencies. You can use wildcards (*.xsd, *.wsdl) for this argument."/>
      <argument name="MetadataUrl" format="{0}" multiplicity="ZeroOrOne" ordinal="1" description="The URL to a service endpoint that provides metadata or to a metadata document hosted online."/>
      <argument name="Asynchronous" format="/a" multiplicity="ZeroOrOne" description="Generates both synchronous and asynchronous method signatures."/>
      <argument name="CollectionType" format="/ct:{0}" multiplicity="ZeroOrOne" description="Specifies a fully-qualified or assembly-qualified name of the type to be used as a collection data type, when code is generated from schemas."/>
      <argument name="Config" format="/config:{0}" multiplicity="ZeroOrOne" description="Specifies the filename for the generated configuration file."/>
      <argument name="DataContractOnly" format="/dconly" multiplicity="ZeroOrOne" description="Generates code for data contract types only. Service Contract types are not generated."/>
      <argument name="EnableDataBinding" format="/edb" multiplicity="ZeroOrOne" description="Implements the INotifyPropertyChanged interface on all Data Contract types to enable data binding."/>
      <argument name="ExcludeType" format="/et:{0}" multiplicity="ZeroOrMore" description="Specifies a fully-qualified or assembly-qualified type name to be excluded from referenced contract types."/>
      <argument name="ImportXmlTypes" format="/importXmlTypes" multiplicity="ZeroOrOne" description="Configures the Data Contract serializer to import non-Data Contract types as IXmlSerializable types."/>
      <argument name="Internal" format="/i" multiplicity="ZeroOrOne" description="Generates classes that are marked as internal."/>
      <argument name="Language" format="/l:{0}" multiplicity="ZeroOrOne" description="Specifies the programming language to use for code generation."/>
      <argument name="MergeConfig" format="/mergeConfig" multiplicity="ZeroOrOne" description="Merges the generated configuration into an existing file, instead of overwriting the existing file."/>
      <argument name="MessageContract" format="/mc" multiplicity="ZeroOrOne" description="Generates Message Contract types."/>
      <argument name="Namespace" format="/n:{0},{1}" multiplicity="ZeroOrMore" description="Specifies a mapping from a WSDL or XML Schema targetNamespace to a CLR namespace. Using '*' for the targetNamespace maps all targetNamespaces without an explicit mapping to that CLR namespace.&#xa;To make sure that the message contract name does not collide with operation name, you should either qualify the type reference with ::, or make sure the names are unique."/>
      <argument name="NoConfig" format="/noConfig" multiplicity="ZeroOrOne" description="Do not generate configuration files."/>
      <argument name="NoStandardLibs" format="/noStdLib" multiplicity="ZeroOrOne" description="Do not reference Mscorlib.dll and System.servicemodel.dll."/>
      <argument name="OutputFile" format="/o:&quot;{0}&quot;" multiplicity="ZeroOrOne" description="Specifies the file name for the generated code."/>
      <argument name="Serializable" format="/s" multiplicity="ZeroOrOne" description="Generates classes marked with the Serializable Attribute."/>
      <argument name="TargetClientVersion" format="/tcv:{0}" multiplicity="ZeroOrOne" description="Specify which version of .NET Framework the application is targetting."/>
      <argument name="Reference" format="/r:{0}" multiplicity="ZeroOrMore" description="References types in the specified assembly. When generating clients, use this option to specify assemblies that might contain types that represent the metadata being imported.&#xa;You cannot specify message contracts and XmlSerializer types using this switch."/>
      <argument name="Serializer" format="/ser:{0}" multiplicity="ZeroOrOne" description="Options for selecting the serializer type."/>
      <argument name="Wrapped" format="/wrapped" multiplicity="ZeroOrOne" description="Controls whether special-casing is used for document-literal styled documents with wrapped parameters.&#xa;Use the /wrapped switch with the ServiceModel Metadata Utility Tool (Svcutil.exe) tool to specify normal casing."/>
      <!-- metadata export arguments -->
      <argument name="AssemblyPath" format="&quot;{0}&quot;" multiplicity="ExactlyOne" description="Specifies the path to an assembly that contains services, contracts or data contract types to be exported.&#xa;Standard command line wildcards can be used to provide multiple files as input."/>
      <argument name="ServiceName" format="/serviceName" multiplicity="ZeroOrOne" ordinal="1" description="Specifies the configuration name of a service to be exported. If this option is used, an executable assembly with an associated configuration file must be passed as input.&#xa;Svcutil.exe searches all associated configuration files for the service configuration. If the configuration files contain any extension types,&#xa;the assemblies that contain these types must either be in the GAC or explicitly provided using the /reference option."/>
      <!-- service validation arguments -->
      <argument name="Validate" format="/v" multiplicity="ExactlyOne" ordinal="0" description=""/>
      <!-- XmlSerializer type generation arguments -->
      <argument name="UseSerializerForFaults" format="/UseSerializerForFaults" multiplicity="ZeroOrOne" description="Specifies that the XmlSerializer should be used for reading and writing faults, instead of the default DataContractSerializer."/>
    </arguments>

    <gui name="SvcUtil (4.0)">
      <control type="Options"/>

      <!-- global options -->
      <binding name="No Logo">
        <control type="Check"/>
        <bindTo argument="NoLogo"/>
      </binding>

      <!-- code generation -->
      <bindingGroup name="Code Generation">
        <control type="Display"/>

        <binding name="Target">
          <control type="Literal" />
          <bindTo argument="Target" />
          <value key="code">Code Generation</value>
        </binding>

        <bindingGroup name="Metadata Source">
          <control type="Options" />

          <binding name="Endpoint Reference">
            <control type="InputFile" mask="*.xml"/>
            <bindTo argument="EndpointRef"/>
          </binding>
          <binding name="Metadata Document">
            <control type="InputFile" mask="*.wsdl|*.xsd|*.wspolicy|*.wsmex"/>
            <bindTo argument="MetadataDoc"/>
          </binding>
          <binding name="Metadata Url">
            <control type="Uri"/>
            <bindTo argument="MetadataUrl"/>
          </binding>
        </bindingGroup>

        <binding name="Asynchronous">
          <control type="Check"/>
          <bindTo argument="Asynchronous"/>
        </binding>

        <binding name="Collection Type">
          <control type="SelectType"/>
          <bindTo argument="CollectionType"/>
        </binding>

        <bindingGroup name="Configuration">
          <control type="Options"/>

          <binding name="Configuration">
            <control type="OutputFile"/>
            <bindTo argument="Config"/>
          </binding>

          <binding name="No Configuration">
            <control type="Literal"/>
            <bindTo argument="NoConfig"/>
          </binding>
        </bindingGroup>

        <binding name="Merge Configuration">
          <control type="Check"/>
          <bindTo argument="MergeConfig"/>
        </binding>

        <bindingGroup name="Contracts">
          <control type="Display"/>

          <binding name="Data Contract Only">
            <control type="Check"/>
            <bindTo argument="DataContractOnly"/>
          </binding>

          <binding name="Message Contract">
            <control type="Check"/>
            <bindTo argument="MessageContract"/>
          </binding>

          <binding name="Wrapped">
            <control type="Check"/>
            <bindTo argument="Wrapped"/>
          </binding>
        </bindingGroup>

        <binding name="Enable Data Binding">
          <control type="Check"/>
          <bindTo argument="EnableDataBinding"/>
        </binding>

        <binding name="Exclude Type">
          <control type="SelectType"/>
          <bindTo argument="ExcludeType"/>
        </binding>

        <binding name="Import Xml Types">
          <control type="Check"/>
          <bindTo argument="ImportXmlTypes" />
        </binding>

        <binding name="Internal">
          <control type="Check"/>
          <bindTo argument="Internal"/>
        </binding>

        <binding name="Language">
          <control type="Options"/>
          <bindTo argument="Language"/>
          <value key="cs">C#</value>
          <value key="vb">VB</value>
          <value key="cpp">C++</value>
        </binding>

        <binding name="Namespace">
          <control type="Text"/>
          <bindTo argument="Namespace"/>
          <value>Xml Namespace</value>
          <value>CLR Namespace</value>
        </binding>

        <binding name="No Standard libraries">
          <control type="Check"/>
          <bindTo argument="NoStandardLibs"/>
        </binding>

        <binding name="Output Directory">
          <control type="Folder"/>
          <bindTo argument="Directory"/>
        </binding>

        <binding name="Output File">
          <control type="Text"/>
          <bindTo argument="OutputFile"/>
        </binding>

        <binding name="Serializable">
          <control type="Check"/>
          <bindTo argument="Serializable"/>
        </binding>

        <binding name="Target Client Version">
          <control type="Options"/>
          <bindTo argument="TargetClientVersion"/>
          <value key="Version30">.NET 3.0</value>
          <value key="Version35">.NET 3.5</value>
        </binding>

        <binding name="Reference">
          <control type="InputFile" mask="*.dll|*.exe"/>
          <bindTo argument="Reference"/>
        </binding>

        <binding name="Serializer">
          <control type="Options"/>
          <bindTo argument="Serializer"/>
          <value>Auto</value>
          <value>DataContractSerializer</value>
          <value>XmlSerializer</value>
        </binding>

      </bindingGroup>

      <!-- metadata export -->
      <bindingGroup name="Metadata Export">
        <control type="Display"/>

        <binding name="Target">
          <control type="Literal" />
          <bindTo argument="Target" />
          <value key="metadata">Metadata Export</value>
        </binding>

        <binding name="Input Assembly">
          <control type="InputFile" mask="*.dll|*.exe"/>
          <bindTo argument="AssemblyPath"/>
        </binding>

        <binding name="Output Directory">
          <control type="Folder"/>
          <bindTo argument="Directory"/>
        </binding>

        <binding name="Service Name (from config)">
          <control type="Text"/>
          <bindTo argument="ServiceName"/>
        </binding>

        <binding name="Data Contract Only">
          <control type="Check"/>
          <bindTo argument="DataContractOnly"/>
        </binding>

        <binding name="Reference">
          <control type="InputFile" mask="*.dll|*.exe"/>
          <bindTo argument="Reference"/>
        </binding>

        <binding name="Exclude Type">
          <control type="SelectType"/>
          <bindTo argument="ExcludeType"/>
        </binding>
      </bindingGroup>

      <!-- metadata download -->
      <bindingGroup name="Metadata Download">
        <control type="Display"/>

        <binding name="Target">
          <control type="Literal" />
          <bindTo argument="Target" />
          <value key="metadata">Metadata Download</value>
        </binding>

        <bindingGroup name="Metadata Source">
          <control type="Options" />

          <binding name="Endpoint Reference">
            <control type="InputFile" mask="*.xml"/>
            <bindTo argument="EndpointRef"/>
          </binding>
          <binding name="Metadata Url">
            <control type="Uri"/>
            <bindTo argument="MetadataUrl"/>
          </binding>
        </bindingGroup>

        <binding name="Output Directory">
          <control type="Folder"/>
          <bindTo argument="Directory"/>
        </binding>

      </bindingGroup>

      <!-- service validation-->
      <bindingGroup name="Service Validation">
        <control type="Display"/>

        <binding name="Target">
          <control type="Literal" />
          <bindTo argument="Validate" />
          <value>Service Validation</value>
        </binding>

        <binding name="Input Assembly">
          <control type="InputFile" mask="*.dll|*.exe"/>
          <bindTo argument="AssemblyPath"/>
        </binding>

        <binding name="Output Directory">
          <control type="Folder"/>
          <bindTo argument="Directory"/>
        </binding>

        <binding name="Data Contract Only">
          <control type="Check"/>
          <bindTo argument="DataContractOnly"/>
        </binding>

        <binding name="Service Name (from config)">
          <control type="Text"/>
          <bindTo argument="ServiceName"/>
        </binding>

        <binding name="Reference">
          <control type="InputFile" mask="*.dll|*.exe"/>
          <bindTo argument="Reference"/>
        </binding>

        <binding name="Exclude Type">
          <control type="SelectType"/>
          <bindTo argument="ExcludeType"/>
        </binding>
      </bindingGroup>

      <!-- XmlSerializer type generation -->
      <!-- service validation-->
      <bindingGroup name="XmlSerializer Type Generation">
        <control type="Display"/>

        <binding name="Target">
          <control type="Literal" />
          <bindTo argument="Target" />
          <value key="xmlSerializer">XmlSerializer Types</value>
        </binding>

        <binding name="Input Assembly">
          <control type="InputFile" mask="*.dll|*.exe"/>
          <bindTo argument="AssemblyPath"/>
        </binding>

        <binding name="Output Directory">
          <control type="Folder"/>
          <bindTo argument="Directory"/>
        </binding>

        <binding name="Output File">
          <control type="Text"/>
          <bindTo argument="OutputFile"/>
        </binding>

        <binding name="Reference">
          <control type="InputFile" mask="*.dll|*.exe"/>
          <bindTo argument="Reference"/>
        </binding>

        <binding name="Exclude Type">
          <control type="SelectType"/>
          <bindTo argument="ExcludeType"/>
        </binding>
      </bindingGroup>

    </gui>

    <exitCodes>
      <exitCode value="0" description="Success" />
    </exitCodes>

  </executable>

</executables>